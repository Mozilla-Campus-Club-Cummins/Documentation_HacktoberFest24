

## 3. Building a More Detailed CRUD API

You may also want to extend the API with more advanced CRUD operations and features like:

### Step 6: Adding Pagination to GET Requests
When the dataset grows large, pagination helps in fetching a limited set of results.

**Example**: Add pagination to `GET /items`.


----------------------------------------JavaScript-------------------------------------------------------
app.get('/items', (req, res) => {
  const { page = 1, limit = 10 } = req.query; // Default page 1, limit 10
  const startIndex = (page - 1) * limit;
  const endIndex = page * limit;

  const paginatedItems = items.slice(startIndex, endIndex);
  res.json(paginatedItems);
});
-----------------------------------------------------------------------------------------------
- **Request**: `GET /items?page=2&limit=5`
- **Response**: A subset of items based on the page and limit parameters.

### Step 7: Connecting to a Real Database

For real-world applications, using an in-memory array (like `items`) isn’t ideal. You should use a database. Here’s how to integrate **MongoDB** (using **Mongoose**), but you could also use **MySQL**, **PostgreSQL**, or any other DB.

#### MongoDB Integration:
1. Install Mongoose:

-----------------------------------------------------------------------------------------------
      npm install mongoose
  
-----------------------------------------------------------------------------------------------

2. Create a `models` folder with a `Item.js` file inside:
  
------------------------------------------------JavaScript-----------------------------------------------
   const mongoose = require('mongoose');

   const itemSchema = new mongoose.Schema({
     name: { type: String, required: true },
     description: { type: String, required: true }
   });

   module.exports = mongoose.model('Item', itemSchema);
  
-----------------------------------------------------------------------------------------------

3. Connect to MongoDB in `server.js`:
   
--------------------------------------------JavaScript---------------------------------------------------
   const mongoose = require('mongoose');
   const Item = require('./models/Item');

   mongoose.connect('mongodb://localhost/my_database', { useNewUrlParser: true, useUnifiedTopology: true })
     .then(() => console.log('MongoDB connected'))
     .catch(err => console.log(err));

-----------------------------------------------------------------------------------------------

4. Update your routes to use MongoDB:
--------------------------------------------JavaScript---------------------------------------------------
   // POST - Create a new item
   app.post('/items', async (req, res) => {
     const { name, description } = req.body;
     try {
       const newItem = new Item({ name, description });
       await newItem.save();
       res.status(201).json(newItem);
     } catch (err) {
       res.status(500).json({ error: 'Server error' });
     }
   });

-----------------------------------------------------------------------------------------------

### Step 8: Adding Authentication

To secure your API, you might want to add authentication. A common way is to use **JWT (JSON Web Token)** for stateless authentication.

1. Install JWT:
  -----------------------------------------------------------------------------------------------
   npm install jsonwebtoken

-----------------------------------------------------------------------------------------------

2. Create authentication middleware:
 
----------------------------------------------JavaScript----------------------------------------
   const jwt = require('jsonwebtoken');

   const authenticateToken = (req, res, next) => {
     const token = req.header('Authorization')?.split(' ')[1];
     if (!token) return res.status(403).json({ message: 'Access denied' });

     try {
       const verified = jwt.verify(token, 'secretKey');
       req.user = verified;
       next();
     } catch (err) {
       res.status(400).json({ message: 'Invalid token' });
     }
   };

-----------------------------------------------------------------------------------------------

3. Protect routes by applying the middleware:
  
-------------------------------------------JavaScript----------------------------------------------------
   app.post('/items', authenticateToken, (req, res) => {
     // Only authenticated users can create items
   });
-----------------------------------------------------------------------------------------------

You can refer to the official JWT documentation and other libraries like **Passport.js** for a more comprehensive authentication system.

---

## 4. Deploying Your API

### Step 9: Deploy to Heroku (Free Tier)
You can deploy your API to a platform like **Heroku** for free.

1. Install the Heroku CLI:

-----------------------------------------------------------------------------------------------
   brew tap heroku/brew && brew install heroku

-----------------------------------------------------------------------------------------------

2. Login to Heroku:

-----------------------------------------------------------------------------------------------
   heroku login
 
-----------------------------------------------------------------------------------------------

3. Create a new Heroku app:

-----------------------------------------------------------------------------------------------
   heroku create
  
-----------------------------------------------------------------------------------------------`

4. Push your code to Heroku:
 
-----------------------------------------------------------------------------------------------
   git push heroku master
  
-----------------------------------------------------------------------------------------------

5. Open your app in the browser:
   ```bash
   heroku open
   ```

Heroku provides free hosting with limited resources, suitable for testing and lightweight apps.

---

